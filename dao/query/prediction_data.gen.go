// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shaanmei_backend/dao/model"
)

func newPredictionDatum(db *gorm.DB, opts ...gen.DOOption) predictionDatum {
	_predictionDatum := predictionDatum{}

	_predictionDatum.predictionDatumDo.UseDB(db, opts...)
	_predictionDatum.predictionDatumDo.UseModel(&model.PredictionDatum{})

	tableName := _predictionDatum.predictionDatumDo.TableName()
	_predictionDatum.ALL = field.NewAsterisk(tableName)
	_predictionDatum.ID = field.NewInt32(tableName, "id")
	_predictionDatum.CarrierName = field.NewString(tableName, "carrier_name")
	_predictionDatum.RecipientName = field.NewString(tableName, "recipient_name")
	_predictionDatum.MineName = field.NewString(tableName, "mine_name")
	_predictionDatum.MineCounty = field.NewString(tableName, "mine_county")
	_predictionDatum.RecipientCounty = field.NewString(tableName, "recipient_county")
	_predictionDatum.ProductType = field.NewString(tableName, "product_type")
	_predictionDatum.VehicleType = field.NewString(tableName, "vehicle_type")
	_predictionDatum.LoadWeight = field.NewFloat32(tableName, "load_weight")
	_predictionDatum.Distance = field.NewFloat32(tableName, "distance")
	_predictionDatum.ShipmentCost = field.NewFloat32(tableName, "shipment_cost")
	_predictionDatum.ArrivalTime = field.NewTime(tableName, "arrival_time")

	_predictionDatum.fillFieldMap()

	return _predictionDatum
}

type predictionDatum struct {
	predictionDatumDo predictionDatumDo

	ALL             field.Asterisk
	ID              field.Int32
	CarrierName     field.String
	RecipientName   field.String
	MineName        field.String
	MineCounty      field.String
	RecipientCounty field.String
	ProductType     field.String
	VehicleType     field.String
	LoadWeight      field.Float32
	Distance        field.Float32
	ShipmentCost    field.Float32
	ArrivalTime     field.Time

	fieldMap map[string]field.Expr
}

func (p predictionDatum) Table(newTableName string) *predictionDatum {
	p.predictionDatumDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p predictionDatum) As(alias string) *predictionDatum {
	p.predictionDatumDo.DO = *(p.predictionDatumDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *predictionDatum) updateTableName(table string) *predictionDatum {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.CarrierName = field.NewString(table, "carrier_name")
	p.RecipientName = field.NewString(table, "recipient_name")
	p.MineName = field.NewString(table, "mine_name")
	p.MineCounty = field.NewString(table, "mine_county")
	p.RecipientCounty = field.NewString(table, "recipient_county")
	p.ProductType = field.NewString(table, "product_type")
	p.VehicleType = field.NewString(table, "vehicle_type")
	p.LoadWeight = field.NewFloat32(table, "load_weight")
	p.Distance = field.NewFloat32(table, "distance")
	p.ShipmentCost = field.NewFloat32(table, "shipment_cost")
	p.ArrivalTime = field.NewTime(table, "arrival_time")

	p.fillFieldMap()

	return p
}

func (p *predictionDatum) WithContext(ctx context.Context) *predictionDatumDo {
	return p.predictionDatumDo.WithContext(ctx)
}

func (p predictionDatum) TableName() string { return p.predictionDatumDo.TableName() }

func (p predictionDatum) Alias() string { return p.predictionDatumDo.Alias() }

func (p predictionDatum) Columns(cols ...field.Expr) gen.Columns {
	return p.predictionDatumDo.Columns(cols...)
}

func (p *predictionDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *predictionDatum) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["carrier_name"] = p.CarrierName
	p.fieldMap["recipient_name"] = p.RecipientName
	p.fieldMap["mine_name"] = p.MineName
	p.fieldMap["mine_county"] = p.MineCounty
	p.fieldMap["recipient_county"] = p.RecipientCounty
	p.fieldMap["product_type"] = p.ProductType
	p.fieldMap["vehicle_type"] = p.VehicleType
	p.fieldMap["load_weight"] = p.LoadWeight
	p.fieldMap["distance"] = p.Distance
	p.fieldMap["shipment_cost"] = p.ShipmentCost
	p.fieldMap["arrival_time"] = p.ArrivalTime
}

func (p predictionDatum) clone(db *gorm.DB) predictionDatum {
	p.predictionDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p predictionDatum) replaceDB(db *gorm.DB) predictionDatum {
	p.predictionDatumDo.ReplaceDB(db)
	return p
}

type predictionDatumDo struct{ gen.DO }

func (p predictionDatumDo) Debug() *predictionDatumDo {
	return p.withDO(p.DO.Debug())
}

func (p predictionDatumDo) WithContext(ctx context.Context) *predictionDatumDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p predictionDatumDo) ReadDB() *predictionDatumDo {
	return p.Clauses(dbresolver.Read)
}

func (p predictionDatumDo) WriteDB() *predictionDatumDo {
	return p.Clauses(dbresolver.Write)
}

func (p predictionDatumDo) Session(config *gorm.Session) *predictionDatumDo {
	return p.withDO(p.DO.Session(config))
}

func (p predictionDatumDo) Clauses(conds ...clause.Expression) *predictionDatumDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p predictionDatumDo) Returning(value interface{}, columns ...string) *predictionDatumDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p predictionDatumDo) Not(conds ...gen.Condition) *predictionDatumDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p predictionDatumDo) Or(conds ...gen.Condition) *predictionDatumDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p predictionDatumDo) Select(conds ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p predictionDatumDo) Where(conds ...gen.Condition) *predictionDatumDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p predictionDatumDo) Order(conds ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p predictionDatumDo) Distinct(cols ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p predictionDatumDo) Omit(cols ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p predictionDatumDo) Join(table schema.Tabler, on ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p predictionDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p predictionDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p predictionDatumDo) Group(cols ...field.Expr) *predictionDatumDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p predictionDatumDo) Having(conds ...gen.Condition) *predictionDatumDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p predictionDatumDo) Limit(limit int) *predictionDatumDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p predictionDatumDo) Offset(offset int) *predictionDatumDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p predictionDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *predictionDatumDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p predictionDatumDo) Unscoped() *predictionDatumDo {
	return p.withDO(p.DO.Unscoped())
}

func (p predictionDatumDo) Create(values ...*model.PredictionDatum) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p predictionDatumDo) CreateInBatches(values []*model.PredictionDatum, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p predictionDatumDo) Save(values ...*model.PredictionDatum) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p predictionDatumDo) First() (*model.PredictionDatum, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PredictionDatum), nil
	}
}

func (p predictionDatumDo) Take() (*model.PredictionDatum, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PredictionDatum), nil
	}
}

func (p predictionDatumDo) Last() (*model.PredictionDatum, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PredictionDatum), nil
	}
}

func (p predictionDatumDo) Find() ([]*model.PredictionDatum, error) {
	result, err := p.DO.Find()
	return result.([]*model.PredictionDatum), err
}

func (p predictionDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PredictionDatum, err error) {
	buf := make([]*model.PredictionDatum, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p predictionDatumDo) FindInBatches(result *[]*model.PredictionDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p predictionDatumDo) Attrs(attrs ...field.AssignExpr) *predictionDatumDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p predictionDatumDo) Assign(attrs ...field.AssignExpr) *predictionDatumDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p predictionDatumDo) Joins(fields ...field.RelationField) *predictionDatumDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p predictionDatumDo) Preload(fields ...field.RelationField) *predictionDatumDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p predictionDatumDo) FirstOrInit() (*model.PredictionDatum, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PredictionDatum), nil
	}
}

func (p predictionDatumDo) FirstOrCreate() (*model.PredictionDatum, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PredictionDatum), nil
	}
}

func (p predictionDatumDo) FindByPage(offset int, limit int) (result []*model.PredictionDatum, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p predictionDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p predictionDatumDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p predictionDatumDo) Delete(models ...*model.PredictionDatum) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *predictionDatumDo) withDO(do gen.Dao) *predictionDatumDo {
	p.DO = *do.(*gen.DO)
	return p
}
