// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"shaanmei_backend/dao/model"
)

func newMineSeriesDatum(db *gorm.DB, opts ...gen.DOOption) mineSeriesDatum {
	_mineSeriesDatum := mineSeriesDatum{}

	_mineSeriesDatum.mineSeriesDatumDo.UseDB(db, opts...)
	_mineSeriesDatum.mineSeriesDatumDo.UseModel(&model.MineSeriesDatum{})

	tableName := _mineSeriesDatum.mineSeriesDatumDo.TableName()
	_mineSeriesDatum.ALL = field.NewAsterisk(tableName)
	_mineSeriesDatum.ID = field.NewInt32(tableName, "id")
	_mineSeriesDatum.MineName = field.NewString(tableName, "mine_name")
	_mineSeriesDatum.MineLongitude = field.NewFloat32(tableName, "mine_longitude")
	_mineSeriesDatum.MineLatitude = field.NewFloat32(tableName, "mine_latitude")
	_mineSeriesDatum.AvgShipmentPrice = field.NewFloat32(tableName, "avg_shipment_price")
	_mineSeriesDatum.TotalShipmentVolume = field.NewFloat32(tableName, "total_shipment_volume")
	_mineSeriesDatum.Timestamp = field.NewTime(tableName, "timestamp")

	_mineSeriesDatum.fillFieldMap()

	return _mineSeriesDatum
}

type mineSeriesDatum struct {
	mineSeriesDatumDo mineSeriesDatumDo

	ALL                 field.Asterisk
	ID                  field.Int32
	MineName            field.String
	MineLongitude       field.Float32
	MineLatitude        field.Float32
	AvgShipmentPrice    field.Float32
	TotalShipmentVolume field.Float32
	Timestamp           field.Time

	fieldMap map[string]field.Expr
}

func (m mineSeriesDatum) Table(newTableName string) *mineSeriesDatum {
	m.mineSeriesDatumDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mineSeriesDatum) As(alias string) *mineSeriesDatum {
	m.mineSeriesDatumDo.DO = *(m.mineSeriesDatumDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mineSeriesDatum) updateTableName(table string) *mineSeriesDatum {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MineName = field.NewString(table, "mine_name")
	m.MineLongitude = field.NewFloat32(table, "mine_longitude")
	m.MineLatitude = field.NewFloat32(table, "mine_latitude")
	m.AvgShipmentPrice = field.NewFloat32(table, "avg_shipment_price")
	m.TotalShipmentVolume = field.NewFloat32(table, "total_shipment_volume")
	m.Timestamp = field.NewTime(table, "timestamp")

	m.fillFieldMap()

	return m
}

func (m *mineSeriesDatum) WithContext(ctx context.Context) *mineSeriesDatumDo {
	return m.mineSeriesDatumDo.WithContext(ctx)
}

func (m mineSeriesDatum) TableName() string { return m.mineSeriesDatumDo.TableName() }

func (m mineSeriesDatum) Alias() string { return m.mineSeriesDatumDo.Alias() }

func (m mineSeriesDatum) Columns(cols ...field.Expr) gen.Columns {
	return m.mineSeriesDatumDo.Columns(cols...)
}

func (m *mineSeriesDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mineSeriesDatum) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["mine_name"] = m.MineName
	m.fieldMap["mine_longitude"] = m.MineLongitude
	m.fieldMap["mine_latitude"] = m.MineLatitude
	m.fieldMap["avg_shipment_price"] = m.AvgShipmentPrice
	m.fieldMap["total_shipment_volume"] = m.TotalShipmentVolume
	m.fieldMap["timestamp"] = m.Timestamp
}

func (m mineSeriesDatum) clone(db *gorm.DB) mineSeriesDatum {
	m.mineSeriesDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mineSeriesDatum) replaceDB(db *gorm.DB) mineSeriesDatum {
	m.mineSeriesDatumDo.ReplaceDB(db)
	return m
}

type mineSeriesDatumDo struct{ gen.DO }

func (m mineSeriesDatumDo) Debug() *mineSeriesDatumDo {
	return m.withDO(m.DO.Debug())
}

func (m mineSeriesDatumDo) WithContext(ctx context.Context) *mineSeriesDatumDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mineSeriesDatumDo) ReadDB() *mineSeriesDatumDo {
	return m.Clauses(dbresolver.Read)
}

func (m mineSeriesDatumDo) WriteDB() *mineSeriesDatumDo {
	return m.Clauses(dbresolver.Write)
}

func (m mineSeriesDatumDo) Session(config *gorm.Session) *mineSeriesDatumDo {
	return m.withDO(m.DO.Session(config))
}

func (m mineSeriesDatumDo) Clauses(conds ...clause.Expression) *mineSeriesDatumDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mineSeriesDatumDo) Returning(value interface{}, columns ...string) *mineSeriesDatumDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mineSeriesDatumDo) Not(conds ...gen.Condition) *mineSeriesDatumDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mineSeriesDatumDo) Or(conds ...gen.Condition) *mineSeriesDatumDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mineSeriesDatumDo) Select(conds ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mineSeriesDatumDo) Where(conds ...gen.Condition) *mineSeriesDatumDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mineSeriesDatumDo) Order(conds ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mineSeriesDatumDo) Distinct(cols ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mineSeriesDatumDo) Omit(cols ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mineSeriesDatumDo) Join(table schema.Tabler, on ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mineSeriesDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mineSeriesDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mineSeriesDatumDo) Group(cols ...field.Expr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mineSeriesDatumDo) Having(conds ...gen.Condition) *mineSeriesDatumDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mineSeriesDatumDo) Limit(limit int) *mineSeriesDatumDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mineSeriesDatumDo) Offset(offset int) *mineSeriesDatumDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mineSeriesDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *mineSeriesDatumDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mineSeriesDatumDo) Unscoped() *mineSeriesDatumDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mineSeriesDatumDo) Create(values ...*model.MineSeriesDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mineSeriesDatumDo) CreateInBatches(values []*model.MineSeriesDatum, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mineSeriesDatumDo) Save(values ...*model.MineSeriesDatum) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mineSeriesDatumDo) First() (*model.MineSeriesDatum, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MineSeriesDatum), nil
	}
}

func (m mineSeriesDatumDo) Take() (*model.MineSeriesDatum, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MineSeriesDatum), nil
	}
}

func (m mineSeriesDatumDo) Last() (*model.MineSeriesDatum, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MineSeriesDatum), nil
	}
}

func (m mineSeriesDatumDo) Find() ([]*model.MineSeriesDatum, error) {
	result, err := m.DO.Find()
	return result.([]*model.MineSeriesDatum), err
}

func (m mineSeriesDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MineSeriesDatum, err error) {
	buf := make([]*model.MineSeriesDatum, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mineSeriesDatumDo) FindInBatches(result *[]*model.MineSeriesDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mineSeriesDatumDo) Attrs(attrs ...field.AssignExpr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mineSeriesDatumDo) Assign(attrs ...field.AssignExpr) *mineSeriesDatumDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mineSeriesDatumDo) Joins(fields ...field.RelationField) *mineSeriesDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mineSeriesDatumDo) Preload(fields ...field.RelationField) *mineSeriesDatumDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mineSeriesDatumDo) FirstOrInit() (*model.MineSeriesDatum, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MineSeriesDatum), nil
	}
}

func (m mineSeriesDatumDo) FirstOrCreate() (*model.MineSeriesDatum, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MineSeriesDatum), nil
	}
}

func (m mineSeriesDatumDo) FindByPage(offset int, limit int) (result []*model.MineSeriesDatum, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mineSeriesDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mineSeriesDatumDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mineSeriesDatumDo) Delete(models ...*model.MineSeriesDatum) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mineSeriesDatumDo) withDO(do gen.Dao) *mineSeriesDatumDo {
	m.DO = *do.(*gen.DO)
	return m
}
